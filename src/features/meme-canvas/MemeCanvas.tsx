import { useEffect } from "react";
import { Canvas2DRef } from "./interface";
import {
  setCanvas2D,
  setCanvasDimensions,
  isCanvasSet,
  isCanvasImageSet,
  getEmbeddedImageRect,
} from "./utils";
import styles from "./MemeCanvas.module.css";
import { useSelector } from "react-redux";
import { RootState } from "../../app/rootReducer";
import { MemeImage } from "../../features/meme-images-list/interface";
import { get, isNil } from "lodash";

export const CANVAS_ID = "meme-canvas";
export const CANVAS_PARENT_ID = `${CANVAS_ID}-parent`;

let canvasRef = {} as Canvas2DRef;

export default function MemeCanvas() {
  const { image } = useSelector((state: RootState) => state.dashboard);
  const getRefId = (): string | undefined => get(canvasRef, "image.refId");
  const hasRefId = () => typeof getRefId() === "string";

  function renderImage(image: HTMLImageElement): void {
    const { x, y, width, height } = getEmbeddedImageRect(image, canvasRef);

    canvasRef.context.drawImage(image, x, y, width, height);
  }

  function renderSelected(): void {
    if (!hasRefId()) {
      return;
    }
    // All this witchcraft...
    // why not loading via image url
    // Well here we are accessing image url generated by next <Image />
    const imageRefElement = document.getElementById(getRefId());
    const { src } = imageRefElement.querySelector("img");
    const image = new Image(canvasRef.image.width, canvasRef.image.height);

    image.onload = () => {
      renderImage(image);
    };

    image.src = src;
  }

  function isAlreadySelected(selected: MemeImage): boolean {
    return isCanvasImageSet(canvasRef) && canvasRef.image.id === selected.id;
  }

  function onSelected(selected: MemeImage): void {
    if (isNil(selected) || isAlreadySelected(selected)) {
      return;
    }
    canvasRef.image = selected;
    renderSelected();
  }

  function setCanvas(): void {
    if (isCanvasSet(canvasRef)) {
      return;
    }
    setCanvas2D(canvasRef, CANVAS_ID, CANVAS_PARENT_ID);
    setCanvasDimensions(canvasRef);
    window.addEventListener("resize", onResize);
  }

  function onResize(): void {
    setCanvasDimensions(canvasRef);
    renderSelected();
  }

  function onDestroy(): void {
    window.removeEventListener("resize", onResize);
    canvasRef = {} as Canvas2DRef;
  }

  function onInit(): void {
    setCanvas();
  }

  useEffect(() => {
    onInit();
    onSelected(image);
    return onDestroy;
  });

  return (
    <div id={CANVAS_PARENT_ID} className={styles["canvas-container"]}>
      <canvas data-testid={CANVAS_ID} id={CANVAS_ID}></canvas>
    </div>
  );
}
