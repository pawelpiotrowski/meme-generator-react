import { useEffect, useState } from "react";
import { Canvas2DRef } from "./interface";
import {
  setCanvas2D,
  setCanvasDimensions,
  isCanvasSet,
  isCanvasImageSet,
  getEmbeddedImageRect,
  useCanvasSize,
  exportCanvasToImage,
} from "./utils";
import styles from "./MemeCanvas.module.css";
import { useSelector } from "react-redux";
import { RootState } from "../../app/rootReducer";
import { attempt, get, isNil } from "lodash";
import { CANVAS_EXPORT_ID, CANVAS_ID, CANVAS_PARENT_ID } from "./constants";
import { SVG_PARENT_ID } from "../meme-text-output/MemeSvg";

export default function MemeCanvas() {
  const { image: selectedImage } = useSelector(
    (state: RootState) => state.dashboard
  );
  const [canvasObject, setCanvasObject] = useState({} as Canvas2DRef);
  const canvasSize = useCanvasSize();

  const getRefId = (): string | undefined => get(canvasObject, "image.refId");
  const hasRefId = () => typeof getRefId() === "string";

  function exportCanvas() {
    exportCanvasToImage(canvasObject, SVG_PARENT_ID, CANVAS_EXPORT_ID);
  }

  function clearCanvas() {
    canvasObject.context.clearRect(
      0,
      0,
      canvasObject.width,
      canvasObject.height
    );
  }

  function renderSelectedImage(imageToRender: HTMLImageElement) {
    const { x, y, width, height } = getEmbeddedImageRect(
      imageToRender,
      canvasObject
    );

    canvasObject.context.drawImage(imageToRender, x, y, width, height);
  }

  function loadSelectedImage(clbk?: () => void) {
    if (!hasRefId()) {
      return;
    }
    // All this witchcraft...
    // why not loading via image url
    // Well here we are accessing image url generated by next <Image />
    const imageRefElement = document.getElementById(getRefId());
    const { src } = imageRefElement.querySelector("img");
    const memeImage = new Image(
      canvasObject.image.width,
      canvasObject.image.height
    );

    memeImage.onload = () => {
      renderSelectedImage(memeImage);
      attempt(clbk);
    };

    memeImage.src = src;
  }

  function render() {
    clearCanvas();
    loadSelectedImage();
  }

  function isAlreadySelected(): boolean {
    return (
      isCanvasImageSet(canvasObject) &&
      canvasObject.image.id === selectedImage.id
    );
  }

  function onSelectedImage() {
    if (isNil(selectedImage) || isAlreadySelected()) {
      return;
    }
    canvasObject.image = selectedImage;

    setCanvasObject(canvasObject);
    render();
  }

  function onResize() {
    setCanvasObject(setCanvasDimensions(canvasObject, canvasSize));
    render();
  }

  function setCanvas() {
    if (isCanvasSet(canvasObject)) {
      return;
    }
    setCanvasObject(setCanvas2D(canvasObject, CANVAS_ID));
    setCanvasObject(setCanvasDimensions(canvasObject, canvasSize));
  }

  // mount
  useEffect(setCanvas, []);
  // will update selectedImage
  useEffect(onSelectedImage, [selectedImage]);
  // will update canvasSize
  useEffect(onResize, [canvasSize]);

  return (
    <div id={CANVAS_PARENT_ID} className={styles.canvasContainer}>
      <canvas data-testid={CANVAS_ID} id={CANVAS_ID}></canvas>
      <canvas className={styles.exportCanvas} id={CANVAS_EXPORT_ID}></canvas>
      <button className={styles.exportCanvasButton} onClick={exportCanvas}>
        DOWNLOAD
      </button>
    </div>
  );
}
